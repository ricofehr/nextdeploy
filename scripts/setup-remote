#!/bin/bash
#
# Setup script for install nextdeploy platform on remote servers
# @author Eric Fehr (ricofehr@nextdeploy.io, @github: ricofehr)

PUPPETIP=''
PUPPETFQDN=''
PUPPETPORT=8140
OUT='out/remote.log'
BINSED='/bin/sed'
YES=0
DEBUG=1
TIMETOREBOOT=180
DOMAIN=''

NEUTRONPUBDEV=''
NEUTRONEXTDEV=''
GITLABURI=''
PUBPREFIX=''
APIPREFIX=''
DATAPREFIX=''
NEXTDEPLOYSUF=''
NEXTDEPLOYURI=''
MANAGEMENTPREFIX=''
ISOTHERNOVA=0
ISINSTALLPUPPETMASTER=0
ISUPDATEPUPPETMASTER=0
PUPPETSSHPORT=22
CONTROLLERIP=''
NEUTRONIP=''
GLANCEIP=''
NEXTDEPLOYIP=''
MAILADMIN=''
ADMINPASSWORD=''
NDC2IP=''
NOVAIP=''
NOVA2IP=''
NOVA3IP=''
NOVA4IP=''
NOVA5IP=''

# use gsed if macosx
[[ -f /usr/bin/sw_vers ]] && BINSED='/usr/local/bin/gsed'

source scripts/inc/utils

# display help
nextdeployhelp() {
  cat <<EOF
Usage: $0 [options]

-h                          this is some help text.
-q                          quieter mode
-y                          non-interactive mode, take default value when no setted
-g xxxx                     gitlaburi (default is gitlab.domain)
-ne xxxx                    set the neutron external interface (for the public openstack subnet, default is eth1)
-np xxxx                    set the neutron public interface (default is eth0)
-p xxxx                     subnet prefix (external network) for vms (default is 192.168.171)
-a xxxx                     subnet prefix for api network (default is 192.168.170)
-d xxxx                     subnet prefix for data network (default is 172.16.171)
-e xxxx                     subnet prefix for management network (default is 172.16.170)
-n xxxx                     dns server for vms (default is 192.168.171.60)
-m xxxx                     nextdeploy global URI (default is nextdeploy.domain)
-ma xxxx                    an email for some alerts purpose (default is admin@example.com)
-pa xxxx                    admin password used for some webui (like grafana)
-s xxxx                     nextdeploy dns suffixes (default is os.domain)
-t xxxx                     set the time needed to reboot a node (default is 220)
--domain xxxx               global domain for the nextdeploy nodes (default is none)
--puppetmaster-ip   xxxx    ip for puppetmaster service
--puppetmaster-sshport xxxx port for ssh to puppermaster node (default is 22)
--puppetmaster-fqdn xxxx    fqdn for puppetmaster service
--install-puppetmaster      install the puppet master service
--update-puppetmaster       update the puppet master service with lastest modules and hiera files
--controller-ip xxxx        install the controller node (ip needed)
--neutron-ip xxxx           install the neutron node (ip needed)
--glance-ip xxxx            install the glance node (ip needed)
--nova-ip xxxx              install the nova node (ip needed)
--nova2-ip xxxx             install a second nova node (ip needed)
--nova3-ip xxxx             install a third nova node (ip needed)
--nova4-ip xxxx             install a fourth nova node (ip needed)
--nova5-ip xxxx             install a fifth nova node (ip needed)
--nextdeploy-ip xxxx        install the nextdeploy manager node (ip needed)
--ndc2-ip xxxx              install the ndc2 node (ip needed)
EOF

exit 0
}


# Parse cmd options
while (($# > 0)); do
  case "$1" in
    -ne)
      shift
      NEUTRONEXTDEV="$1"
      shift
      ;;
    -np)
      shift
      NEUTRONPUBDEV="$1"
      shift
      ;;
    -d)
      shift
      DEBUG=2
      ;;
    -q)
      shift
      DEBUG=0
      ;;
    -y)
      shift
      YES=1
      ;;
    -g)
      shift
      GITLABURI="$1"
      shift
      ;;
    -h)
      shift
      nextdeployhelp
      ;;
    -p)
      shift
      PUBPREFIX="$1"
      DNSIP="${PUBPREFIX}.60"
      shift
      ;;
    -a)
      shift
      APIPREFIX="$1"
      shift
      ;;
    -d)
      shift
      DATAPREFIX="$1"
      shift
      ;;
    -e)
      shift
      MANAGEMENTPREFIX="$1"
      shift
      ;;
    -n)
      shift
      DNSIP="$1"
      shift
      ;;
    -m)
      shift
      NEXTDEPLOYURI="$1"
      shift
      ;;
    -ma)
      shift
      MAILADMIN="$1"
      shift
      ;;
    -pa)
      shift
      ADMINPASSWORD="$1"
      shift
      ;;
    -s)
      shift
      NEXTDEPLOYSUF="$1"
      shift
      ;;
    -t)
      shift
      TIMETOREBOOT="$1"
      shift
      ;;
    --domain)
      shift
      DOMAIN="$1"
      shift
      ;;
    --puppetmaster-ip)
      shift
      PUPPETIP="$1"
      shift
      ;;
    --puppetmaster-sshport)
      shift
      PUPPETSSHPORT="$1"
      shift
      ;;
    --puppetmaster-fqdn)
      shift
      PUPPETFQDN="$1"
      shift
      ;;
    --install-puppetmaster)
      shift
      ISINSTALLPUPPETMASTER=1
      ;;
    --update-puppetmaster)
      shift
      ISUPDATEPUPPETMASTER=1
      ;;
    --controller-ip)
      shift
      CONTROLLERIP="$1"
      shift
      ;;
    --neutron-ip)
      shift
      NEUTRONIP="$1"
      shift
      ;;
    --glance-ip)
      shift
      GLANCEIP="$1"
      shift
      ;;
    --nova-ip)
      shift
      NOVAIP="$1"
      shift
      ;;
    --nova2-ip)
      shift
      NOVA2IP="$1"
      ISOTHERNOVA=1
      shift
      ;;
    --nova3-ip)
      shift
      NOVA3IP="$1"
      ISOTHERNOVA=1
      shift
      ;;
    --nova4-ip)
      shift
      NOVA4IP="$1"
      ISOTHERNOVA=1
      shift
      ;;
    --nova5-ip)
      shift
      NOVAI5P="$1"
      ISOTHERNOVA=1
      shift
      ;;
    --nextdeploy-ip)
      shift
      NEXTDEPLOYIP="$1"
      shift
      ;;
    --ndc2-ip)
      shift
      NDC2IP="$1"
      shift
      ;;
    *)
      nextdeployhelp
      shift
      ;;
  esac
done

# ensure minimum requirement with non-interactive mode
if (( YES == 1 )); then
  [[ -z "PUPPETIP" ]] && output -e "Parameter --puppetmaster-ip is missing"
  [[ -z "PUPPETFQDN" ]] && output -e "Parameter --puppetmaster-fqdn is missing"
fi

# Clean log file
rm -f "${OUT}"

# Redirect output to log file
if [[ -n "$OUT" ]]; then
  rm -f $OUT
  exec 3>&1 4>&2 1>>$OUT 2>&1
fi

# Some intoduction words
welcome_step() {
  output -l -q "This script is an help for install nextdeploy on remote servers."
  output -l -q "You need 4 servers for install openstack nodes, 1 server for the manager node (gitlab, rest api, dns) and one empty puppet service up somewhere outside this 5 servers."
  output -l -q "Your remote servers need to be accessed by ssh with root user."
  confirm "Continue ?"
  echo -en "\n\n"
}

# Prerequisites
prerequisites() {
  # init local var with global ones
  local publicprefix="$PUBPREFIX"
  local dataprefix="$DATAPREFIX"
  local apiprefix="$APIPREFIX"
  local managementprefix="$MANAGEMENTPREFIX"
  local exteth="$NEUTRONEXTDEV"
  local masqeth="$NEUTRONPUBDEV"
  local nextdeployuri="$NEXTDEPLOYURI"
  local gitlaburi="$GITLABURI"
  local nextdeploysuf="$NEXTDEPLOYSUF"
  local mailadmin="$MAILADMIN"
  local adminpassword="$ADMINPASSWORD"

  # if non-interactive mode, preset with default values when variable is empty
  if (( YES == 1 )); then
    [[ -z "$publicprefix" ]] && publicprefix='192.168.71'
    [[ -z "$dataprefix" ]] && dataprefix='172.16.71'
    [[ -z "$apiprefix" ]] && apiprefix='192.168.70'
    [[ -z "$managementprefix" ]] && managementprefix='172.16.70'
    [[ -z "$exteth" ]] && exteth='eth1'
    [[ -z "$masqeth" ]] && masqeth='eth0'
    [[ -z "$nextdeployuri" ]] && nextdeployuri="nextdeploy.$DOMAIN"
    [[ -z "$gitlaburi" ]] && gitlaburi="gitlab.${nextdeployuri}"
    [[ -z "$nextdeploysuf" ]] && nextdeploysuf="os.nextdeploy.${DOMAIN}"
    [[ -z "$PUPPETPORT" ]] && PUPPETPORT="8140"
    [[ -z "$mailadmin" ]] && mailadmin="admin@example.com"
    [[ -z "$adminpassword" ]] && adminpassword="admin"
  fi

  # temporary folder used by remote install
  rm -rf tmp/remote
  mkdir tmp/remote
  mkdir tmp/remote/os
  mkdir tmp/remote/nextdeploy
  mkdir tmp/remote/ndc2

  # duplicate yaml and specific puppet files for remote setting
  cp vagrant/os/hiera/os/uos* tmp/remote/os/
  cp vagrant/nextdeploy/hiera/nextdeploy/nextdeploy* tmp/remote/nextdeploy/
  cp vagrant/ndc2/hiera/ndc2/ndc2* tmp/remote/ndc2/
  cp vagrant/os/hiera/global.yaml.dist tmp/remote/os/global.yaml
  cp vagrant/nextdeploy/hiera/global.yaml.dist tmp/remote/nextdeploy/global.yaml
  cp vagrant/ndc2/hiera/global.yaml.dist tmp/remote/ndc2/global.yaml
  cp vagrant/modules/pm/files/varnish/default.vcl.ndc2 tmp/remote/ndc2/
  cp vagrant/modules/pm/files/hosts/hosts tmp/remote/hosts_global
  cp vagrant/modules/pm/files/nginx/os-doc.conf tmp/remote/nextdeploy/
  cp vagrant/modules/pm/files/nginx/os-http.conf tmp/remote/nextdeploy/
  cp vagrant/modules/pm/files/scripts/puma-start tmp/remote/nextdeploy/
  cp vagrant/modules/pm/files/pound/pound.cfg tmp/remote/nextdeploy/
  cp vagrant/modules/pm/files/pound/pound.cfg tmp/remote/ndc2/

  # prepare until 5 compute node hiera files
  pushd tmp/remote/os/ > /dev/null
  cp uosnv.yaml uosnv2.yaml && $BINSED -i "s/75/76/;s/is_nv0: 'yes'/is_nv0: 'no'/" uosnv2.yaml
  cp uosnv.yaml uosnv3.yaml && $BINSED -i "s/75/77/;s/is_nv0: 'yes'/is_nv0: 'no'/" uosnv3.yaml
  cp uosnv.yaml uosnv4.yaml && $BINSED -i "s/75/78/;s/is_nv0: 'yes'/is_nv0: 'no'/" uosnv4.yaml
  cp uosnv.yaml uosnv5.yaml && $BINSED -i "s/75/79/;s/is_nv0: 'yes'/is_nv0: 'no'/" uosnv5.yaml
  popd > /dev/null

  # get the publicprefix
  if [[ -z "$publicprefix" ]]; then
    output -q -l "The openstack public network (default is 192.168.71) ?"
    read publicprefix
    [[ -z "$publicprefix" ]] && publicprefix='192.168.71'
  fi

  # get the data prefix
  if [[ -z "$dataprefix" ]]; then
    output -q -l "The openstack data network (default is 172.16.71) ?"
    read dataprefix
    [[ -z "$dataprefix" ]] && dataprefix='172.16.71'
  fi

  # get the api prefix
  if [[ -z "$apiprefix" ]]; then
    output -q -l "The openstack api network (default is 192.168.70) ?"
    read apiprefix
    [[ -z "$apiprefix" ]] && apiprefix='192.168.70'
  fi

  # get the management prefix
  if [[ -z "$managementprefix" ]]; then
    output -q -l "The openstack management network (default is 172.16.70) ?"
    read managementprefix
    [[ -z "$managementprefix" ]] && managementprefix='172.16.70'
  fi

  # the public network device
  if [[ -z "$exteth" ]]; then
    output -q -l "The ethernet device associated on neutron to the openstack public network (default is eth1) ?"
    read exteth
    [[ -z "$exteth" ]] && exteth='eth1'
  fi

  # the external device
  if [[ -z "$masqeth" ]]; then
    output -q -l "The ethernet device associated to the default route on neutron ? (default is eth0)"
    read masqeth
    [[ -z "$masqeth" ]] && masqeth='eth0'
  fi

  # the local domain for the 5 nextdeploy servers
  if [[ -z "$DOMAIN" ]] && [[ "$YES" = "0" ]]; then
    output -q -l "The local domain for the 5 nextdeploy servers ? (default is nothing)"
    read DOMAIN
    [[ -z "$DOMAIN" ]] && DOMAIN=''
  fi

  # the nextdeploy webui
  if [[ -z "$nextdeployuri" ]]; then
    output -q -l "The manager nextdeploy uri ? (default is nextdeploy.${DOMAIN})"
    read nextdeployuri
    [[ -z "$nextdeployuri" ]] && nextdeployuri="nextdeploy.$DOMAIN"
  fi

  # the gitlab webui
  if [[ -z "$gitlaburi" ]]; then
    output -q -l "The gitlab uri ? (default is gitlab.${nextdeployuri})"
    read gitlaburi
    [[ -z "$gitlaburi" ]] && gitlaburi="gitlab.${nextdeployuri}"
  fi

  # the common subdomain for vm endpoint
  if [[ -z "$nextdeploysuf" ]]; then
    output -q -l "The common wildcard subdomain for the vms ? (default is os.nextdeploy.${DOMAIN})"
    read nextdeploysuf
    [[ -z "$nextdeploysuf" ]] && nextdeploysuf="os.nextdeploy.${DOMAIN}"
  fi

  # an email for some alert purpose
  if [[ -z "$mailadmin" ]]; then
    output -q -l "The admin email for some alerts purpose ? (default is admin@example.com)"
    read mailadmin
    [[ -z "$mailadmin" ]] && mailadmin="admin@example.com"
  fi

  # an admin password for some webui purposes
  if [[ -z "$adminpassword" ]]; then
    output -q -l "The admin password for some webui (like grafana) ? (default is admin)"
    read adminpassword
    [[ -z "$adminpassword" ]] && adminpassword="admin"
  fi

  # get from input the puppetmaster ip
  if [[ -z "$PUPPETIP" ]]; then
    output -q -l "Puppet-master ip ?"
    read PUPPETIP
  fi

  if [[ -z "$PUPPETFQDN" ]]; then
    output -q -l "Puppet-master fqdn ?"
    read PUPPETFQDN
  fi

  if [[ -z "$PUPPETPORT" ]]; then
    output -q -l "Puppet-master port (default is 8140) ?"
    read PUPPETPORT
    [[ -z "$PUPPETPORT" ]] && PUPPETPORT="8140"
  fi

  # create puppet.conf file
  cat > tmp/remote/puppet.conf << EOF
[main]
dns_alt_names=%%FQDNS%%
logdir=/var/log/puppet
vardir=/var/lib/puppet
ssldir=/var/lib/puppet/ssl
rundir=/var/run/puppet
factpath=$vardir/lib/facter
hiera_config=/etc/hiera.yaml
ordering=manifest
reports=none

[master]
ssl_client_header = SSL_CLIENT_S_DN
ssl_client_verify_header = SSL_CLIENT_VERIFY

[agent]
server=${PUPPETFQDN}
masterport=${PUPPETPORT}
report=true
pluginsync=true
ssldir=/var/lib/puppet/sslagent
EOF


  # prepare global.yaml file
  # os part
  $BINSED -i "s;%%PUBPREFIX%%;${publicprefix};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%DATAPREFIX%%;${dataprefix};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%APIPREFIX%%;${apiprefix};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%MANAGEMENTPREFIX%%;${managementprefix};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%EXTDEV%%;${exteth};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%PUBDEV%%;${masqeth};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%NOVAHV%%;kvm;" tmp/remote/os/global.yaml
  $BINSED -i "s;%%NEXTDEPLOYURI%%;${nextdeployuri};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%NEXTDEPLOYSUF%%;${nextdeploysuf};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%GITLABURI%%;${gitlaburi};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%GITLABNS%%;${gitlaburi%%/*};" tmp/remote/os/global.yaml
  # nextdeploy part
  $BINSED -i "s;%%PUBPREFIX%%;${publicprefix};" tmp/remote/nextdeploy/global.yaml
  $BINSED -i "s;%%DATAPREFIX%%;${dataprefix};" tmp/remote/nextdeploy/global.yaml
  $BINSED -i "s;%%APIPREFIX%%;${apiprefix};" tmp/remote/nextdeploy/global.yaml
  $BINSED -i "s;%%MANAGEMENTPREFIX%%;${managementprefix};" tmp/remote/nextdeploy/global.yaml
  $BINSED -i "s;%%NEXTDEPLOYURI%%;${nextdeployuri};" tmp/remote/nextdeploy/global.yaml
  $BINSED -i "s;%%NEXTDEPLOYSUF%%;${nextdeploysuf};" tmp/remote/nextdeploy/global.yaml
  $BINSED -i "s;%%GITLABURI%%;${gitlaburi};" tmp/remote/nextdeploy/global.yaml
  $BINSED -i "s;%%GITLABNS%%;${gitlaburi%%/*};" tmp/remote/nextdeploy/global.yaml
  $BINSED -i "s;%%RAILSENV%%;production;" tmp/remote/nextdeploy/global.yaml
  $BINSED -i "s;%%PUBLICADDRESS%%;0.0.0.0;" tmp/remote/nextdeploy/pound.cfg
  $BINSED -i "s;%%HTTPADDRESS%%;127.0.0.1;" tmp/remote/nextdeploy/pound.cfg
  # ndc2 part
  $BINSED -i "s;%%PUBPREFIX%%;${publicprefix};" tmp/remote/ndc2/global.yaml
  $BINSED -i "s;%%NEXTDEPLOYURI%%;${nextdeployuri};" tmp/remote/ndc2/global.yaml
  $BINSED -i "s;%%MAILADMIN%%;${mailadmin};" tmp/remote/ndc2/global.yaml
  $BINSED -i "s;%%ADMINPASSWORD%%;${adminpassword};" tmp/remote/ndc2/global.yaml
  $BINSED -i "s;%%PUBPREFIX%%;${publicprefix};g" tmp/remote/ndc2/default.vcl.ndc2
  $BINSED -i "s;%%PUBLICADDRESS%%;0.0.0.0;" tmp/remote/ndc2/pound.cfg
  $BINSED -i "s;%%HTTPADDRESS%%;127.0.0.1;" tmp/remote/ndc2/pound.cfg

  # merge the 2 global files
  cat tmp/remote/os/global.yaml tmp/remote/nextdeploy/global.yaml tmp/remote/ndc2/global.yaml | sort | uniq > tmp/remote/global.yaml

  # prepare rails production config file
  cp ror/config/environments/production.rb.dist tmp/remote/nextdeploy/production.rb

  # prepare project pattern definitions
  cp -f ror/jsons/create_project.json.dist tmp/remote/nextdeploy/create_project.json
  cp -f ror/jsons/new_project.json.dist tmp/remote/nextdeploy/new_project.json

  # prepare rails config file
  $BINSED -i "s;%%PUBPREFIX%%;${publicprefix};g" tmp/remote/nextdeploy/production.rb
  $BINSED -i "s;%%NEXTDEPLOYSUF%%;${nextdeploysuf};g" tmp/remote/nextdeploy/production.rb
  $BINSED -i "s;%%NEXTDEPLOYURI%%;${nextdeployuri};g" tmp/remote/nextdeploy/production.rb
  $BINSED -i "s;%%GITLABNS%%;${gitlaburi%%/*};g" tmp/remote/nextdeploy/production.rb

  # prepare hosts file
  $BINSED -i "s;%%GITLABNS%%;${gitlaburi%%/*};g" tmp/remote/hosts_global
  $BINSED -i "s;%%PUBPREFIX%%;${publicprefix};g" tmp/remote/hosts_global
  $BINSED -i "s;%%APIPREFIX%%;${apiprefix};g" tmp/remote/hosts_global
  $BINSED -i "s;%%MANAGEMENTPREFIX%%;${managementprefix};g" tmp/remote/hosts_global
  $BINSED -i "s;%%DATAPREFIX%%;${dataprefix};g" tmp/remote/hosts_global
  echo "${PUPPETIP} ${PUPPETFQDN}" >> tmp/remote/hosts_global

  # prepare nginx nextdeploy files
  $BINSED -i "s;%%NEXTDEPLOYSUF%%;${nextdeploysuf};g" tmp/remote/nextdeploy/os-http.conf
  $BINSED -i "s;%%NEXTDEPLOYURI%%;${nextdeployuri};g" tmp/remote/nextdeploy/os-http.conf
  $BINSED -i "s;%%GITLABURI%%;${gitlaburi};g" tmp/remote/nextdeploy/os-http.conf
  $BINSED -i "s;%%NEXTDEPLOYURI%%;${nextdeployuri};g" tmp/remote/nextdeploy/os-doc.conf

  #prepare puma.sh
  $BINSED -i "s;%%RAILSENV%%;production -t 8:32 -w 2;" tmp/remote/nextdeploy/puma-start

  # ask to configure vlans on remote servers
  output -l -q "On controller openstack node, please configure this 3 private ips: ${managementprefix}.70, ${dataprefix}.70, ${apiprefix}.70"
  output -l -q "On neutron openstack node, please configure this 4 private ips: ${publicprefix}.71, ${managementprefix}.71, ${dataprefix}.71, ${apiprefix}.71"
  output -l -q "On glance openstack node, please configure this 2 private ips: ${managementprefix}.72, ${apiprefix}.72"
  output -l -q "On compute openstack node, please configure this 3 private ips: ${managementprefix}.75, ${dataprefix}.75, ${apiprefix}.75"
  output -l -q "On nextdeploy manager node, please configure this 3 private ips: ${publicprefix}.60, ${managementprefix}.60, ${apiprefix}.60"
  output -l -q "On ndc2 manager node, please configure this 1 private ip: ${publicprefix}.50"
  confirm "Waiting this installations are done ... Continue ?"
  echo -en "\n\n"
}

# update puppet modules
update_puppet() {
  # prepare remote folder
  mkdir -p tmp/remote
  rm -rf tmp/remote/fw
  rm -rf tmp/remote/puppet
  rm -rf tmp/remote/hosts
  rm -rf tmp/remote/nginx
  rm -f tmp/remote/puma-start_*
  rm -f tmp/remote/default.vcl_*
  rm -f tmp/remote/pound.cfg_*

  # backup actual fw files, puppet files, hosts and nginx conf
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" root@${PUPPETIP}:/etc/puppet/modules/pm/files/fw tmp/remote/
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" root@${PUPPETIP}:/etc/puppet/modules/pm/files/puppet tmp/remote/
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" root@${PUPPETIP}:/etc/puppet/modules/pm/files/hosts tmp/remote/
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" root@${PUPPETIP}:/etc/puppet/modules/pm/files/nginx tmp/remote/
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" root@${PUPPETIP}:/etc/puppet/modules/pm/files/scripts/puma-start_* tmp/remote/
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" root@${PUPPETIP}:/etc/puppet/modules/pm/files/varnish/custom/default.vcl_* tmp/remote/
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" root@${PUPPETIP}:/etc/puppet/modules/pm/files/pound/pound.cfg_* tmp/remote/

  # clean puppet master
  ssh -t -t -p ${PUPPETSSHPORT} root@${PUPPETIP} 'rm -rf /etc/puppet/modules'

  # rsync puppet modules (rsync here but a git clone into puppet node should be better)
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" vagrant/modules root@${PUPPETIP}:/etc/puppet/

  # upload specific folders
  [[ -d tmp/remote/fw ]] && rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/fw root@${PUPPETIP}:/etc/puppet/modules/pm/files/
  [[ -d tmp/remote/puppet ]] && rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/puppet root@${PUPPETIP}:/etc/puppet/modules/pm/files/
  [[ -d tmp/remote/hosts ]] && rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/hosts root@${PUPPETIP}:/etc/puppet/modules/pm/files/
  [[ -d tmp/remote/nginx ]] && rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/nginx root@${PUPPETIP}:/etc/puppet/modules/pm/files/
  test -f tmp/remote/puma-start_* && rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/puma-start_* root@${PUPPETIP}:/etc/puppet/modules/pm/files/scripts/
  test -f tmp/remote/default.vcl_* && rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/default.vcl_* root@${PUPPETIP}:/etc/puppet/modules/pm/files/varnish/custom/
  test -f tmp/remote/pound.cfg_* && rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/pound.cfg_* root@${PUPPETIP}:/etc/puppet/modules/pm/files/pound/

  # a second time to ensure that default hosts / puppet / fw / nginx files are updated
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" vagrant/modules root@${PUPPETIP}:/etc/puppet/

  # change owner of puppet modules folder
  ssh -t -t -p ${PUPPETSSHPORT} root@${PUPPETIP} 'chown -R puppet: /etc/puppet/modules'
  # update all hiera files
  update_hierafiles
  # restart the puppet master daemon
  ssh -t -t -p ${PUPPETSSHPORT} root@${PUPPETIP} 'service puppetmaster restart'
}

# update hiera files
update_hierafiles() {
  local nodenames=('uosc' 'uosnt' 'uosst' 'uosnv' 'nextdeploy' 'ndc2' 'uosnv2' 'uosnv3' 'uosnv4' 'uosnv5')
  local nodename=''
  local fqdn=''

  # synchro global hiera file
  scp -P ${PUPPETSSHPORT} tmp/remote/global.yaml root@${PUPPETIP}:/var/lib/hiera/
  # synchro hiera node files
  for nodename in "${nodenames[@]}"; do
    fqdn="$nodename"
    pathyaml="tmp/remote/os/"
    [[ "$nodename" = "nextdeploy" ]] && pathyaml="tmp/remote/nextdeploy/"
    [[ "$nodename" = "ndc2" ]] && pathyaml="tmp/remote/ndc2/"
    [[ -n "$DOMAIN" ]] && fqdn="${fqdn}.${DOMAIN}"
    scp -P ${PUPPETSSHPORT} ${pathyaml}${nodename}.yaml root@${PUPPETIP}:/var/lib/hiera/${fqdn}.yaml
  done
}

# Upload puppet templates for openstack and manager install
remote_puppet() {

  output -q 'Working on remote puppet master'
  # install puppetmaster if we are on debian / ubuntu
  ssh -t -t -p ${PUPPETSSHPORT} root@${PUPPETIP} '[[ -f /etc/debian_version ]] && apt-get install puppetmaster'
  # clean puppet master
  ssh -t -t -p ${PUPPETSSHPORT} root@${PUPPETIP} 'rm -rf /var/lib/hiera && mkdir /var/lib/hiera'
  ssh -t -t -p ${PUPPETSSHPORT} root@${PUPPETIP} 'puppet cert clean --all'

  # create site.pp on remote puppet
  echo 'hiera_include("classes")' > tmp/remote/site.pp
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/site.pp root@${PUPPETIP}:/etc/puppet/manifests/site.pp

  # create hiera.yml file
  cat > tmp/remote/hiera.yaml << EOF
---
:backends:
  - yaml
:yaml:
  :datadir: /var/lib/hiera
:hierarchy:
  - "%{clientcert}"
  - "%{environment}"
  - global
EOF
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/hiera.yaml root@${PUPPETIP}:/etc/puppet/hiera.yaml

  update_puppet

  # copy default hosts file
  scp -P ${PUPPETSSHPORT} tmp/remote/hosts_global root@${PUPPETIP}:/etc/puppet/modules/pm/files/hosts/hosts
}

# ensure puppet installation on the remote node
prepare_node() {
  # ip is the first parameter, fqdn the second
  local remote_ip="$1"
  local fqdn="$2"
  local rtries=0

  local fqdns=${fqdn%%\.*}
  local fwnodename="$fqdns"
  [[ "$fwnodename" = "uosnv"* ]] && fwnodename='uosnv'
  # if long fqdn exists, adding this to fqdns string
  [[ -n "$DOMAIN" ]] && fqdns="${fqdns},${fqdn}"

  output -q "Working on $fqdn node"

  # set hostname if needed
  if [[ "$(ssh root@${remote_ip} "hostname")" != "$fqdn" ]]; then
    # set the fqdn
    ssh -t -t root@${remote_ip} "hostname ${fqdn}; echo '127.0.0.1 ${fqdn}' > /etc/hosts; echo ${fqdn} > /etc/hostname"
    ssh root@${remote_ip} 'sed -i "s/^domain.*//;s/^search.*//" /etc/resolv.conf'
    [[ -n "$DOMAIN" ]] && ssh root@${remote_ip} "echo 'search $DOMAIN' >> /etc/resolv.conf"

    # set locale
    ssh root@${remote_ip} 'echo LANG=en_US.UTF-8 > /etc/default/locale'
    ssh root@${remote_ip} 'echo LC_ALL=en_US.UTF-8 >> /etc/default/locale'

    # add puppetmaster into hosts file
    ssh root@${remote_ip} "echo '${PUPPETIP} ${PUPPETFQDN}' >> /etc/hosts"

    # reboot remote uosc
    ssh -t -t root@${remote_ip} "reboot"

    # reboot and get puppet repo
    confirm 'Server is going to reboot. Please waiting that he is up again and continue with puppet install'
    # if non-interactive, sleep wiating remote_ip is up
    if (( YES == 1 )); then
      while (( rtries++ < 3 )); do
        sleep $TIMETOREBOOT
        ssh root@${remote_ip} "pwd"
        (( $? == 0 )) && break
      done
      (( rtries == 3 )) && output -e "The node $fqdn is not rebooted at time during install process"
    fi
  fi

  # apt-get update
  ssh -t -t root@${remote_ip} "apt-get update"

  # clean old cert
  ssh -t -t root@${remote_ip} "rm -rf /var/lib/puppet/sslagent"

  # install puppet agent
  ssh -t -t root@${remote_ip} "apt-get install -y --force-yes puppet"

  # ensure that puppet agent is stopped
  ssh -t -t root@${remote_ip} "service puppet stop"

  # allow puppet to start
  ssh root@${remote_ip} '[[ -f /etc/default/puppet ]] && sed -i "s;START=no;START=yes;" /etc/default/puppet'

  # puppet.conf file
  rsync -avzPessh tmp/remote/puppet.conf root@${remote_ip}:/etc/puppet/
  ssh root@${remote_ip} "/bin/sed -i 's/%%FQDNS%%/${fqdns}/' /etc/puppet/puppet.conf"

  # synchro fw and hosts file
  if [[ -f vagrant/modules/pm/files/fw/fw_${fwnodename} ]]; then
    rsync -avzPe "ssh -p ${PUPPETSSHPORT}" vagrant/modules/pm/files/fw/fw_${fwnodename} root@${PUPPETIP}:/etc/puppet/modules/pm/files/fw/fw_${fqdn}
    ssh -p ${PUPPETSSHPORT} root@${PUPPETIP} "/bin/sed -i 's/%%PUBLICIP%%/${remote_ip}/;s/###PUBLICIP//' /etc/puppet/modules/pm/files/fw/fw_${fqdn}"
  fi

  if [[ -f tmp/remote/hosts_global ]]; then
    rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/hosts_global root@${PUPPETIP}:/etc/puppet/modules/pm/files/hosts/hosts_${fqdn}
    ssh -p ${PUPPETSSHPORT} root@${PUPPETIP} "/bin/sed -i 's;%%HOSTNAME%%;${fqdn};' /etc/puppet/modules/pm/files/hosts/hosts_${fqdn}"
  fi
}

# launch puppet agent on remote host
launch_puppetagent() {
  # ip is the first parameter, fqdn the second
  local remote_ip="$1"
  local fqdn="$2"

  # clean old cert if needed (but not for ndc2 node)
  [[ $fqdn != "ndc2"* ]] && ssh -t -t -p ${PUPPETSSHPORT} root@${PUPPETIP} "puppet cert clean ${fqdn}"
  # enable puppet on the remote node and validate on puppetmaster
  ssh -t -t root@${remote_ip} 'puppet agent --test'
  sleep 3
  ssh -t -t -p ${PUPPETSSHPORT} root@${PUPPETIP} "puppet cert --allow-dns-alt-names sign ${fqdn}"
  # if non interactive, start puppet agent --test in foreground
  ssh -t -t root@${remote_ip} 'puppet agent --enable'
  ssh -t -t root@${remote_ip} 'service puppet restart'

  # look when the installation is finish on the remote node
  while ((1)); do
    sleep 60
    ssh -t -t root@${remote_ip} 'test -e /var/lib/puppet/state/agent_catalog_run.lock'
    (( $? != 0 )) && break
  done

  output -q -l "Installation on $fqdn node begins, check the puppet-agent actions and continue after his work."

  confirm "Continue ?"
}

# make install process for one node
install_osnode() {
  # fqdn the function parameter
  local nodename="$1"
  local fwnodename="$1"
  local fqdn="$1"
  local remote_ip="$2"
  [[ -n "$DOMAIN" ]] && fqdn="${fqdn}.${DOMAIN}"
  [[ "$nodename" = "uosnv"* ]] && fwnodename='uosnv'

  # get the ip
  if [[ -z "$remote_ip" ]]; then
    output -q -l "The ip for $fqdn controller node ?"
    read remote_ip
  fi

  # set local, hosts and install puppet
  prepare_node $remote_ip $fqdn

  # synchro hiera files
  scp -P ${PUPPETSSHPORT} tmp/remote/global.yaml root@${PUPPETIP}:/var/lib/hiera/
  scp -P ${PUPPETSSHPORT} tmp/remote/os/${nodename}.yaml root@${PUPPETIP}:/var/lib/hiera/${fqdn}.yaml

  # launch puppet-agent for start the installation
  launch_puppetagent $remote_ip $fqdn
}

# Install nextdeploy manager node
install_nextdeploy() {
  # init local variables
  local fqdn='nextdeploy'
  local fqdnshort="$fqdn"
  local remote_ip
  [[ -n "$DOMAIN" ]] && fqdn="${fqdn}.${DOMAIN}"
  [[ -n "$NEXTDEPLOYIP" ]] && remote_ip="$NEXTDEPLOYIP"

  # get the ip
  if [[ -z "$remote_ip" ]]; then
    output -q -l 'The ip for nextdeploy manager node ?'
    read remote_ip
  fi

  # update NEXTDEPLOYIP into production.rb
  $BINSED -i "s;%%NEXTDEPLOYIP%%;${remote_ip};" tmp/remote/nextdeploy/production.rb

  # copy nginx templates file onto puppetmaster
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/nextdeploy/os-doc.conf root@${PUPPETIP}:/etc/puppet/modules/pm/files/nginx/os-doc.conf_${fqdn}
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/nextdeploy/os-http.conf root@${PUPPETIP}:/etc/puppet/modules/pm/files/nginx/os-http.conf_${fqdn}

  # copy pound cfg file
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/nextdeploy/pound.cfg root@${PUPPETIP}:/etc/puppet/modules/pm/files/pound/pound.cfg_${fqdn}

  # copy puma script onto puppetmaster
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/nextdeploy/puma-start root@${PUPPETIP}:/etc/puppet/modules/pm/files/scripts/puma-start_${fqdn}

  # copy puppet.conf onto puppetmaster files repository
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/puppet.conf root@${PUPPETIP}:/etc/puppet/modules/pm/files/puppet/puppet.conf_${fqdn}
  ssh -t -t -p ${PUPPETSSHPORT} root@${PUPPETIP} "/bin/sed -i 's/%%FQDNSHORT%%/${fqdnshort}/' /etc/puppet/modules/pm/files/puppet/puppet.conf_${fqdn}"

  # setting local, hosts and install puppet
  prepare_node $remote_ip $fqdn

  # clone project into tmp folder
  mkdir tmp/nextdeploygit
  pushd tmp/nextdeploygit > /dev/null
  ssh root@${remote_ip} 'mkdir -p /home/nextdeploy'
  git clone --recursive git@github.com:ricofehr/nextdeploy.git .
  # rsync rails app (git clone on remote server should be better)
  rsync -avzPessh . root@${remote_ip}:/home/nextdeploy/
  ssh root@${remote_ip} 'ln -sf /home/nextdeploy/puppet /puppet'
  ssh root@${remote_ip} 'ln -sf /home/nextdeploy/ror /ror'
  ssh root@${remote_ip} 'ln -sf /home/nextdeploy/out /out'
  ssh root@${remote_ip} 'ln -sf /home/nextdeploy/ror/hiera /hiera'
  popd > /dev/null
  rm -rf tmp/nextdeploygit

  # rsync dist files (rails settings and project patterns)
  rsync -avzPessh tmp/remote/nextdeploy/production.rb root@${remote_ip}:/ror/config/environments/
  ssh root@${remote_ip} '[[ -f /ror/jsons/create_project.json ]]' || rsync -avzPessh tmp/remote/nextdeploy/create_project.json root@${remote_ip}:/ror/jsons/
  ssh root@${remote_ip} '[[ -f /ror/jsons/new_project.json ]]' || rsync -avzPessh tmp/remote/nextdeploy/new_project.json root@${remote_ip}:/ror/jsons/

  # synchro hiera files
  scp -P ${PUPPETSSHPORT} tmp/remote/global.yaml root@${PUPPETIP}:/var/lib/hiera/
  scp -P ${PUPPETSSHPORT} tmp/remote/nextdeploy/nextdeploy.yaml root@${PUPPETIP}:/var/lib/hiera/${fqdn}.yaml

  # launch puppet-agent for start the installation
  launch_puppetagent $remote_ip $fqdn

  # allow puppetmaster to start at boot
  ssh root@${remote_ip} '[[ -f /etc/default/puppetmaster ]] && sed -i "s;START=no;START=yes;" /etc/default/puppetmaster'
}

# Install ndc2 manager node
install_ndc2() {
  # init local variables
  local fqdn='ndc2'
  local fqdnshort="$fqdn"
  local remote_ip
  [[ -n "$DOMAIN" ]] && fqdn="${fqdn}.${DOMAIN}"
  [[ -n "$NDC2IP" ]] && remote_ip="$NDC2IP"

  # get the ip
  if [[ -z "$remote_ip" ]]; then
    output -q -l 'The ip for ndc2 node ?'
    read remote_ip
  fi

  # copy varnish vcl onto puppetmaster
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/ndc2/default.vcl.ndc2 root@${PUPPETIP}:/etc/puppet/modules/pm/files/varnish/custom/default.vcl_${fqdn}

  # copy pound cfg file
  rsync -avzPe "ssh -p ${PUPPETSSHPORT}" tmp/remote/ndc2/pound.cfg root@${PUPPETIP}:/etc/puppet/modules/pm/files/pound/pound.cfg_${fqdn}


  # setting local, hosts and install puppet
  prepare_node $remote_ip $fqdn

  # synchro hiera files
  scp -P ${PUPPETSSHPORT} tmp/remote/global.yaml root@${PUPPETIP}:/var/lib/hiera/
  scp -P ${PUPPETSSHPORT} tmp/remote/ndc2/ndc2.yaml root@${PUPPETIP}:/var/lib/hiera/${fqdn}.yaml

  # use same cert for master and client
  ssh root@${remote_ip} 'puppet agent -t'
  ssh root@${remote_ip} 'cd /var/lib/puppet/sslagent && rm -rf certs private_keys public_keys'
  ssh root@${remote_ip} 'cd /var/lib/puppet/sslagent && ln -s ../ssl/certs && ln -s ../ssl/private_keys && ln -s ../ssl/public_keys'

  # launch puppet-agent for start the installation
  launch_puppetagent $remote_ip $fqdn

  # allow puppetmaster to start at boot
  ssh root@${remote_ip} '[[ -f /etc/default/puppetmaster ]] && sed -i "s;START=no;START=yes;" /etc/default/puppetmaster'
}

welcome_step
prerequisites

# puppetmaster part, ask update if no install
output -l -q 'Remote puppet installation ? (y/n)'
if (( ISINSTALLPUPPETMASTER ==  1 )); then
  response="y"
elif (( YES == 0 )); then
  read response
else
  response="n"
fi

if [[ "$response" = "y" ]]; then
  remote_puppet
else
  output -l -q 'Update puppet modules ? (y/n)'
  if (( ISUPDATEPUPPETMASTER ==  1 )); then
    response="y"
  elif (( YES == 0 )); then
    read response
  else
    response="n"
  fi
  [[ "$response" = "y" ]] && update_puppet
fi

# ndc2 part
output -l -q 'NdC2 manager installation ? (y/n)'
if [[ -n "$NDC2IP" ]]; then
  response="y"
elif (( YES == 0 )); then
  read response
else
  response="n"
fi
[[ "$response" = "y" ]] && install_ndc2

# controller part
output -l -q 'Openstack controller installation ? (y/n)'
if [[ -n "$CONTROLLERIP" ]]; then
  response="y"
elif (( YES == 0 )); then
  read response
else
  response="n"
fi
[[ "$response" = "y" ]] && install_osnode uosc $CONTROLLERIP

# neutron part
output -l -q 'Openstack neutron installation ? (y/n)'
if [[ -n "$NEUTRONIP" ]]; then
  response="y"
elif (( YES == 0 )); then
  read response
else
  response="n"
fi
[[ "$response" = "y" ]] && install_osnode uosnt $NEUTRONIP

# glance part
output -l -q 'Openstack glance installation ? (y/n)'
if [[ -n "$GLANCEIP" ]]; then
  response="y"
elif (( YES == 0 )); then
  read response
else
  response="n"
fi
[[ "$response" = "y" ]] && install_osnode uosst $GLANCEIP

# first compute part
output -l -q 'Openstack compute installation ? (y/n)'
if [[ -n "$NOVAIP" ]]; then
  response="y"
elif (( YES == 0 )); then
  read response
else
  response="n"
fi
[[ "$response" = "y" ]] && install_osnode uosnv $NOVAIP

# others compute
output -l -q 'Other(s) compute installation ? (y/n)'
if (( ISOTHERNOVA ==  1 )); then
  response="y"
elif (( YES == 0 )); then
  read response
else
  response="n"
fi
if [[ "$response" = "y" ]]; then
  output -l -q 'A second compute ? (y/n)'
  if [[ -n "$NOVA2IP" ]]; then
    response="y"
  elif (( YES == 0 )); then
    read response
  else
    response="n"
  fi
  [[ "$response" = "y" ]] && install_osnode uosnv2 $NOVA2IP

  output -l -q 'A third compute ? (y/n)'
  if [[ -n "$NOVA3IP" ]]; then
    response="y"
  elif (( YES == 0 )); then
    read response
  else
    response="n"
  fi
  [[ "$response" = "y" ]] && install_osnode uosnv3 $NOVA3IP

  output -l -q 'A fourth compute ? (y/n)'
  if [[ -n "$NOVA4IP" ]]; then
    response="y"
  elif (( YES == 0 )); then
    read response
  else
    response="n"
  fi
  [[ "$response" = "y" ]] && install_osnode uosnv4 $NOVA4IP

  output -l -q 'A fifth compute ? (y/n)'
  if [[ -n "$NOVA5IP" ]]; then
    response="y"
  elif (( YES == 0 )); then
    read response
  else
    response="n"
  fi
  [[ "$response" = "y" ]] && install_osnode uosnv5 $NOVA5IP
fi

# manager part
output -l -q 'NextDeploy manager installation ? (y/n)'
if [[ -n "$NEXTDEPLOYIP" ]]; then
  response="y"
elif (( YES == 0 )); then
  read response
else
  response="n"
fi
[[ "$response" = "y" ]] && install_nextdeploy


exit 0
